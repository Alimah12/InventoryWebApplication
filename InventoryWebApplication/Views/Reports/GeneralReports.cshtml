@using InventoryWebApplication.Services
@using System.Text
@using InventoryWebApplication.Utils
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using System.Globalization
@inject SalesService _salesService
@model InventoryWebApplication.Operations.StartEndDateTimeOperation

@{
    ViewBag.Title = "Reports";
    ViewBag.PreviousPage = "";
    Layout = "_Layout";
}
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<h3>Reports@(Model.Start != DateTime.MinValue ? " from " + Model.Start : "") @(Model.End != DateTime.MaxValue ? " up to " + Model.End : "")</h3>

<div class="text-center">
    <div class="card-deck">
        <div class="card-bottom-margin">
            <div class="card chart pie-chart">
                <div id="paymentMethodsCountPieChart"></div>
            </div>
        </div>

        <div class="card-bottom-margin">
            <div class="card chart pie-chart">
                <div id="paymentMethodsTotalPieChart"></div>
            </div>
        </div>
        
        <div class="card-bottom-margin">
            <div class="card chart pie-chart">
                <div id="paymentMethodsProfitPieChart"></div>
            </div>
        </div> 
        
        <div class="card-bottom-margin">
            <div class="card chart column-chart">
                <div id="dailySalesColumnChart"></div>
            </div>
        </div>
    </div>
    @* <div class="card-deck card-actions"> *@
    @*     <div> *@
    @*         <div class="card"> *@
    @*             <div class="card-body"> *@
    @*                 <h6 class="card-title text-dark">Payment methods / Sales number</h6> *@
    @*                 <div class="pie-chart" id="paymentMethodsCountPieChart"></div> *@
    @*             </div> *@
    @*         </div> *@
    @*     </div> *@
    @* </div> *@
</div>


@section Scripts
{
    @{
        SaleInfo[] sales = await _salesService.GetSalesOverPeriod(Model.Start, Model.End);
    }

    <script>
        const paymentMethodsCountPieChart = document.getElementById('paymentMethodsCountPieChart');
        const paymentMethodsTotalPieChart = document.getElementById('paymentMethodsTotalPieChart');
        const paymentMethodsProfitPieChart = document.getElementById('paymentMethodsProfitPieChart');
        const dailySalesColumnChart = document.getElementById('dailySalesColumnChart');
    
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawAllCharts);
        
        function drawAllCharts(){
            drawPaymentMethodsCount();
            drawPaymentMethodsTotal();
            drawPaymentMethodsProfit();
            drawDailySales();
        }
        
        function finishPieChart(target, data, title) {
            let options = {
                title: title,
            }
            let chart = new google.visualization.PieChart(target);        
            chart.draw(data,  options);
        }
        
        function finishColumnChart(target, data, title) {
            let options = {
                title: title,
            }
            let chart = new google.visualization.ColumnChart(target);        
            chart.draw(data,  options);
        }
        
        function drawPaymentMethodsCount() {
            let data = google.visualization.arrayToDataTable([
                @Html.Raw(JsUtils.BuildChartData("Method", "Sales Count", _salesService.GetSalesCountPerPaymentMethod(sales), o => o.Name, o => o.ToString()))
            ]);
            finishPieChart(paymentMethodsCountPieChart, data,  'Payment methods / Sales number');
        }
        
        function drawPaymentMethodsTotal(){
            let data = google.visualization.arrayToDataTable([
                @Html.Raw(JsUtils.BuildChartData("Method", "Sales", _salesService.GetSalesPerPaymentMethod(sales), o => o.Name, o => o.ToString(CultureInfo.InvariantCulture)))
            ]);
            finishPieChart(paymentMethodsTotalPieChart, data,  'Payment methods / Sales');
        }
        
        function drawPaymentMethodsProfit(){
            let data = google.visualization.arrayToDataTable([
                @Html.Raw(JsUtils.BuildChartData("Method", "Profit", _salesService.GetSalesProfitPerPaymentMethod(sales), o => o.Name, o => o.ToString(CultureInfo.InvariantCulture)))
            ]);
            finishPieChart(paymentMethodsProfitPieChart, data,  'Payment methods / Profit');
        }
        
        function drawDailySales(){
            let data = google.visualization.arrayToDataTable([
                @Html.Raw(JsUtils.BuildChartData("Day", "Sales", "Profit", _salesService.GetDailySalesAndProfit(sales), o => o.ToString(), o => o.ToString(CultureInfo.InvariantCulture), o => o.ToString(CultureInfo.InvariantCulture)))
            ]);
            finishColumnChart(dailySalesColumnChart, data,  'Daily sales');
        }
        
    </script>
}